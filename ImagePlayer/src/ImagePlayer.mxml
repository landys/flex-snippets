<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
	width="290" height="327" initialize="initApp()" 
	applicationComplete="completeApp()"
	backgroundColor="0xFFFFFF"
	verticalScrollPolicy="off" horizontalScrollPolicy="off">
	<mx:Script>
		<![CDATA[
			import flash.utils.setInterval;
			import flash.utils.clearInterval;
			import mx.controls.Alert;
			[Bindable]
			[ArrayElementType("String")]
			private var bigImgs : Array;
			
			[Bindable]
			[ArrayElementType("String")]
			private var smallImgs : Array;
			
   			private var intervalId:Number;
   			private const INTERVAL:int = 5000;
   			private const IMAGE_NUM:int = 5;
   			private var lastImgIndex:int = IMAGE_NUM - 1;
   			private var currImgIndex:int = 0;
   			
   			// http://blog.minidx.com/2008/04/27/785.html
   			private var rLum:Number = 0.2225;
            private var gLum:Number = 0.7169;
            private var bLum:Number = 0.0606; 
   			[Bindable]
            private var bwMatrix:Array = [rLum, gLum, bLum, 0, 0,
                            rLum, gLum, bLum, 0, 0,
                            rLum, gLum, bLum, 0, 0,
                            0, 0, 0, 1, 0]; 
			
			private function initApp():void 
			{
				var strBigImgs:String = Application.application.parameters.bigImgs 
					|| "assets/1.jpg|assets/2.jpg|assets/3.jpg|assets/4.jpg|assets/5.jpg";
				var strSmallImgs:String = Application.application.parameters.smallImgs
					|| "assets/1.jpg|assets/2.jpg|assets/3.jpg|assets/4.jpg|assets/5.jpg";
				bigImgs = strBigImgs.split("|");
				smallImgs = strSmallImgs.split("|");
				
				if (bigImgs == null || bigImgs.length != IMAGE_NUM 
					|| smallImgs == null || smallImgs.length != IMAGE_NUM)
				{
					Alert.show("你传入了错误的flash参数!", "崩溃了!");
					return;
				}
				
				showImg();
				
				intervalId = setInterval(doTimter, INTERVAL);
			}
			
			private function completeApp():void
			{
				imgSmalls[0].filters = [];
				for (var i:int=1; i<imgSmalls.length; i++)
				{
					imgSmalls[i].filters = [cmf];
				}
			}
			
			private function showImg():void
			{
				imgBig.visible = false;
				imgBig.source = bigImgs[currImgIndex];
				imgSmalls[lastImgIndex].filters = [cmf];
				imgSmalls[currImgIndex].filters = [];
				imgBig.visible = true;
			}
			
			private function doTimter():void
			{
				getNextCurrIndex();
				showImg();
			}
			
			private function showNextImg(event:MouseEvent):void
			{
				for (var i:int=0; i<imgSmalls.length; i++)
				{
					if (imgSmalls[i] == event.currentTarget)
					{
						if (i != currImgIndex)
						{
							clearInterval(intervalId);
							lastImgIndex = currImgIndex;
							currImgIndex = i;
							showImg();
							intervalId = setInterval(doTimter, INTERVAL);
						}
						break;
					}
				}
			}
			
			private function getNextCurrIndex():int
			{
				lastImgIndex = currImgIndex;
				currImgIndex =  (currImgIndex + 1) % IMAGE_NUM;
				return currImgIndex;
			}
		]]>
	</mx:Script>
	
	<mx:VBox width="100%" height="100%" paddingTop="5"
		paddingBottom="5" paddingLeft="5" paddingRight="5"
		verticalGap="5" verticalScrollPolicy="off" horizontalScrollPolicy="off"
		backgroundColor="0xFFFFFF">
		<mx:Image id="imgBig" width="100%" height="256"
			verticalAlign="middle" horizontalAlign="center"
			 showEffect="{dissolveIn}"/>
		<mx:HBox width="100%" horizontalGap="5" backgroundColor="0xFFFFFF">
			<mx:Repeater id="rp" dataProvider="{smallImgs}">
                <mx:Image id="imgSmalls" height="49" width="50" 
                	source="{String(rp.currentItem)}"
					verticalAlign="middle" horizontalAlign="center"
					buttonMode="true" useHandCursor="true" mouseChildren="false"
                	click="showNextImg(event)"/>
            </mx:Repeater> 
		</mx:HBox>
	</mx:VBox>

    <mx:Dissolve id="dissolveIn" duration="600" alphaFrom="0.0" alphaTo="1.0"/> 
    
    <mx:ColorMatrixFilter id="cmf" matrix="{bwMatrix}" /> 
</mx:Application>
